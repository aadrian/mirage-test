plugins {
    id 'nebula.optional-base' version '3.2.0' // mvn style optional dependencies
}

apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

apply plugin: 'nebula.optional-base'

group 'com.miragesql'
version '2.1.0-SNAPSHOT'

compileJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}


dependencies {
    compile 'org.javassist:javassist:3.22.0-GA'
    compile 'ognl:ognl:3.2.3'
    compile 'org.slf4j:slf4j-api:1.7.25'

    compile 'commons-dbcp:commons-dbcp:1.4', optional
    compile 'com.zaxxer:HikariCP:2.7.2', optional

    compile "org.springframework:spring-core:3.2.18.RELEASE", optional
    compile "org.springframework:spring-context:3.2.18.RELEASE", optional
    compile "org.springframework:spring-jdbc:3.2.18.RELEASE", optional

    compile "com.google.inject:guice:4.1.0", optional


    compileOnly 'org.apache.ant:ant:1.10.1'
    compileOnly 'org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1'
    compileOnly 'javax.servlet:servlet-api:2.5'

    compile 'junit:junit:4.12'
    testImplementation 'cglib:cglib:3.2.5'
    testImplementation 'org.mockito:mockito-core:2.11.0'
    testImplementation 'com.h2database:h2:1.4.196'
    testImplementation 'org.hsqldb:hsqldb:2.4.0'

    testImplementation 'org.springframework:spring-aop:3.2.18.RELEASE'

    // Use the latest Groovy version for Spock testing
    testImplementation 'org.codehaus.groovy:groovy-all:2.4.12'
    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:1.0-groovy-2.4'

}

// JavaDoc 8 problems
javadoc { failOnError false }

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion,
                'Target-JDK': project.targetCompatibility)
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

def getPom(project) {
    return {
        name 'Mirage-SQL Test'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'Mirage-SQL is an easy and powerful SQL centric database access library for Java (or JVM based languages) which provides dynamic SQL templates in plain SQL files.'
        url 'https://github.com/mirage-sql/mirage'

        organization {
            name 'Mirage-SQL'
            url 'https://github.com/mirage-sql/'
        }

        scm {
            connection 'scm:git:https://github.com/mirage-sql/mirage.git'
            developerConnection 'scm:git:https://github.com/mirage-sql/mirage.git'
            url 'https://github.com/mirage-sql/mirage'
        }

        issueManagement {
            system 'GitHub Issues'
            url 'https://github.com/mirage-sql/mirage/issues'
        }
        licenses {
            license {
                name 'The Apache License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }

        developers {
            developer {
                id 'takezoe'
                name 'Naoki Takezoe'
                email 'takezoe_at_gmail.com'
                url 'http://d.hatena.ne.jp/takezoe/'
                timezone '+9'
            }
            developer {
                id 'daisuke'
                name 'Daisuke Miyamoto'
                email 'dai.0304_at_gmail.com'
                url 'http://d.hatena.ne.jp/daisuke-m/'
                timezone '+9'
            }
            developer {
                id 'aadrian'
                name 'Adrian A.'
                email 'a.adrian.tech_at_gmail.com'
                url 'https://github.com/aadrian'
                timezone '+1'
            }
        }
    }
}

// set these to 'dummy' for Travis CI
def stUser = hasProperty('ossrhUsername')? ossrhUsername: 'dummy'
def stPwd = hasProperty('ossrhPassword')? ossrhPassword: 'dummy'

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: stUser, password: stPwd)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: stUser, password: stPwd)
            }

            pom {
                project getPom(project)
            }
        }
    }
}

// note: this task still does not display 'provided' and 'optional' correctly
task writeNewPom {
    doLast {
        pom {
            project getPom(project)
        }.writeTo("$buildDir/newpom.xml")
    }
}